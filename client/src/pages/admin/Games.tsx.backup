import React, { useState, useEffect, useMemo, useCallback, memo } from 'react';
import { FixedSizeList } from 'react-window';
import AutoSizer from 'react-virtualized-auto-sizer';
import AdminLayout from '@/components/admin/AdminLayout';
import { useLanguage } from '@/contexts/LanguageContext';
import { useToast } from '@/hooks/use-toast';
import {
  Search,
  Filter,
  ChevronDown,
  Edit,
  Trash,
  Eye,
  PlusCircle,
  Download,
  UploadCloud,
  Check,
  X,
  Star,
  Gamepad2,
  ArrowUpRight,
  BarChart2,
  Shuffle,
  SlidersHorizontal,
  LayoutGrid,
  Loader,
  RefreshCw
} from 'lucide-react';

// Oyun türleri
const gameCategories = [
  { id: 'slot', name: 'Slot' },
  { id: 'casino', name: 'Casino' },
  { id: 'live', name: 'Live Casino' },
  { id: 'table', name: 'Table Games' },
  { id: 'poker', name: 'Poker' },
  { id: 'other', name: 'Other' },
];

// Oyun sağlayıcıları
const gameProviders = [
  { id: 'pragmatic', name: 'Pragmatic Play' },
  { id: 'egt', name: 'EGT' },
  { id: 'netent', name: 'NetEnt' },
  { id: 'evolution', name: 'Evolution Gaming' },
  { id: 'playngo', name: 'Play\'n GO' },
  { id: 'amatic', name: 'Amatic' },
  { id: 'microgaming', name: 'Microgaming' },
  { id: 'redtiger', name: 'Red Tiger' },
  { id: 'yggdrasil', name: 'Yggdrasil' },
  { id: 'quickspin', name: 'Quickspin' },
];

// Game tipi tanımı - büyük veri setlerini daha iyi yönetmek için
type Game = {
  id: number;
  name: string;
  provider: string;
  providerName: string;
  category: string;
  categoryName: string;
  rtp: number;
  volatility: string;
  isMobile: boolean;
  isDesktop: boolean;
  isActive: boolean;
  isPopular: boolean;
  releaseDate: string;
  launchCount: number;
  imageUrl: string;
  hasBonus: boolean;
  hasFreeSpins: boolean;
  isFeatured: boolean;
  minBet: number;
  maxBet: number;
  maxWin: number | string;
};

// İstatistik kartı bileşeni - memo ile optimize edildi
const StatCard = memo(({ title, value, icon: Icon, secondaryText, secondaryValue, isPercentage = false }: {
  title: string;
  value: number | string;
  icon: React.ComponentType<any>;
  secondaryText?: string;
  secondaryValue?: number | string;
  isPercentage?: boolean;
}) => {
  return (
    <div className="bg-gray-800/80 p-6 rounded-xl shadow-lg border border-yellow-500/20 backdrop-blur-sm hover:border-yellow-500/30 transition-all duration-300">
      <div className="flex justify-between items-start">
        <div>
          <p className="text-gray-400 text-sm font-medium mb-1">{title}</p>
          <h3 className="text-2xl font-bold text-white">{typeof value === 'number' && !isPercentage ? value.toLocaleString() : value}</h3>
          {secondaryText && (
            <div className="flex items-center mt-2">
              {isPercentage ? (
                <ArrowUpRight className="h-4 w-4 text-green-500 mr-1" />
              ) : (
                <Check className="h-4 w-4 text-green-500 mr-1" />
              )}
              <span className={`text-sm font-medium ${isPercentage ? 'text-green-500' : 'text-green-400'}`}>
                {secondaryText}: {secondaryValue}
              </span>
            </div>
          )}
        </div>
        <div className="p-3 bg-gray-900/80 border border-yellow-500/30 rounded-lg shadow-md">
          <Icon className="h-8 w-8 text-yellow-500" />
        </div>
      </div>
    </div>
  );
});

// Gelişmiş tablo başlığı - sıralama için optimize edildi
const TableHeader = memo(({ column, label, sortable = true, currentSort, onSort }: {
  column: string;
  label: string;
  sortable?: boolean;
  currentSort: { column: string; direction: 'asc' | 'desc' };
  onSort: (column: string) => void;
}) => {
  return (
    <th 
      className={`px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider ${sortable ? 'cursor-pointer hover:bg-gray-700/50' : ''}`}
      onClick={() => sortable && onSort(column)}
    >
      <div className="flex items-center">
        <span>{label}</span>
        {sortable && currentSort.column === column && (
          <ChevronDown
            className={`ml-1 h-4 w-4 transition-transform duration-200 ${
              currentSort.direction === 'desc' ? 'transform rotate-180' : ''
            }`}
          />
        )}
      </div>
    </th>
  );
});

// Gelişmiş sayfalama bileşeni - büyük veri setleri için optimize edildi
const Pagination = memo(({ 
  currentPage, 
  totalPages, 
  onPageChange, 
  totalItems, 
  itemsPerPage 
}: {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
  totalItems: number;
  itemsPerPage: number;
}) => {
  // Görüntülenecek sayfa numaralarını hesaplama
  const getPageNumbers = () => {
    const pages = [];
    const maxVisiblePages = 5;
    
    // 1 ve son sayfa her zaman görünür
    if (totalPages <= maxVisiblePages) {
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      // Kompleks sayfalama algoritması
      pages.push(1);
      
      if (currentPage <= 3) {
        pages.push(2, 3, 4);
        pages.push('ellipsis');
      } else if (currentPage >= totalPages - 2) {
        pages.push('ellipsis');
        pages.push(totalPages - 3, totalPages - 2, totalPages - 1);
      } else {
        pages.push('ellipsis');
        pages.push(currentPage - 1, currentPage, currentPage + 1);
        pages.push('ellipsis');
      }
      
      pages.push(totalPages);
    }
    
    return pages;
  };
  
  const startItem = (currentPage - 1) * itemsPerPage + 1;
  const endItem = Math.min(currentPage * itemsPerPage, totalItems);
  
  return (
    <div className="py-4 px-4 flex flex-col md:flex-row justify-between items-center">
      <div className="text-sm text-gray-400 mb-4 md:mb-0">
        Gösteriliyor: <span className="font-medium text-white">{startItem}-{endItem}</span> / Toplam: <span className="font-medium text-white">{totalItems}</span>
      </div>
      
      <div className="flex items-center space-x-1">
        <button
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className={`px-3 py-1 rounded-md ${
            currentPage === 1 
              ? 'bg-gray-700 text-gray-400 cursor-not-allowed' 
              : 'bg-gray-700 text-white hover:bg-gray-600'
          }`}
        >
          Önceki
        </button>
        
        {getPageNumbers().map((page, index) => (
          page === 'ellipsis' ? (
            <span key={`ellipsis-${index}`} className="px-3 py-1 text-gray-400">...</span>
          ) : (
            <button
              key={page}
              onClick={() => onPageChange(page as number)}
              className={`px-3 py-1 rounded-md ${
                currentPage === page
                  ? 'bg-yellow-500 text-black'
                  : 'bg-gray-700 text-white hover:bg-gray-600'
              }`}
            >
              {page}
            </button>
          )
        ))}
        
        <button
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className={`px-3 py-1 rounded-md ${
            currentPage === totalPages
              ? 'bg-gray-700 text-gray-400 cursor-not-allowed'
              : 'bg-gray-700 text-white hover:bg-gray-600'
          }`}
        >
          Sonraki
        </button>
      </div>
    </div>
  );
});

// Ana bileşen
const Games: React.FC = () => {
  const { t } = useLanguage();
  const { toast } = useToast();
  
  // Durum değişkenleri
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [providerFilter, setProviderFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  const [sortColumn, setSortColumn] = useState('name');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedRows, setSelectedRows] = useState<number[]>([]);
  const [showGameModal, setShowGameModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [gameToDelete, setGameToDelete] = useState<number | null>(null);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [selectedGame, setSelectedGame] = useState<Game | null>(null);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [isLoading, setIsLoading] = useState(false);
  const [isVirtualized, setIsVirtualized] = useState(true);

  // Örnek oyun verileri
  const gamesData = [
    {
      id: 1,
      name: 'Sweet Bonanza',
      provider: 'pragmatic',
      providerName: 'Pragmatic Play',
      category: 'slot',
      categoryName: 'Slot',
      rtp: 96.5,
      volatility: 'high',
      isMobile: true,
      isDesktop: true,
      isActive: true,
      isPopular: true,
      releaseDate: '2019-06-12',
      launchCount: 15824,
      imageUrl: '/src/assets/sweet-bonanza.jpg',
      hasBonus: true,
      hasFreeSpins: true,
      isFeatured: true,
      minBet: 0.2,
      maxBet: 100,
      maxWin: 21100,
    },
    {
      id: 2,
      name: 'Gates of Olympus',
      provider: 'pragmatic',
      providerName: 'Pragmatic Play',
      category: 'slot',
      categoryName: 'Slot',
      rtp: 96.5,
      volatility: 'high',
      isMobile: true,
      isDesktop: true,
      isActive: true,
      isPopular: true,
      releaseDate: '2021-02-25',
      launchCount: 14532,
      imageUrl: '/src/assets/gates-of-olympus.jpg',
      hasBonus: true,
      hasFreeSpins: true,
      isFeatured: true,
      minBet: 0.2,
      maxBet: 100,
      maxWin: 5000,
    },
    {
      id: 3,
      name: 'Blackjack VIP',
      provider: 'evolution',
      providerName: 'Evolution Gaming',
      category: 'live',
      categoryName: 'Live Casino',
      rtp: 99.5,
      volatility: 'low',
      isMobile: true,
      isDesktop: true,
      isActive: true,
      isPopular: false,
      releaseDate: '2018-05-10',
      launchCount: 8541,
      imageUrl: '/src/assets/blackjack.jpg',
      hasBonus: false,
      hasFreeSpins: false,
      isFeatured: false,
      minBet: 5,
      maxBet: 5000,
      maxWin: 0,
    },
    {
      id: 4,
      name: 'Wolf Gold',
      provider: 'pragmatic',
      providerName: 'Pragmatic Play',
      category: 'slot',
      categoryName: 'Slot',
      rtp: 96.0,
      volatility: 'medium',
      isMobile: true,
      isDesktop: true,
      isActive: true,
      isPopular: true,
      releaseDate: '2017-09-02',
      launchCount: 9850,
      imageUrl: '/src/assets/wolf-gold.jpg',
      hasBonus: true,
      hasFreeSpins: true,
      isFeatured: false,
      minBet: 0.25,
      maxBet: 125,
      maxWin: 2500,
    },
    {
      id: 5,
      name: 'Roulette Live',
      provider: 'evolution',
      providerName: 'Evolution Gaming',
      category: 'live',
      categoryName: 'Live Casino',
      rtp: 97.3,
      volatility: 'medium',
      isMobile: true,
      isDesktop: true,
      isActive: true,
      isPopular: true,
      releaseDate: '2018-03-15',
      launchCount: 12487,
      imageUrl: '/src/assets/roulette.jpg',
      hasBonus: false,
      hasFreeSpins: false,
      isFeatured: true,
      minBet: 1,
      maxBet: 10000,
      maxWin: 0,
    },
    {
      id: 6,
      name: 'Book of Dead',
      provider: 'playngo',
      providerName: 'Play\'n GO',
      category: 'slot',
      categoryName: 'Slot',
      rtp: 96.2,
      volatility: 'high',
      isMobile: true,
      isDesktop: true,
      isActive: true,
      isPopular: true,
      releaseDate: '2016-01-14',
      launchCount: 13652,
      imageUrl: '/src/assets/book-of-dead.jpg',
      hasBonus: true,
      hasFreeSpins: true,
      isFeatured: false,
      minBet: 0.1,
      maxBet: 100,
      maxWin: 5000,
    },
    {
      id: 7,
      name: 'Starburst',
      provider: 'netent',
      providerName: 'NetEnt',
      category: 'slot',
      categoryName: 'Slot',
      rtp: 96.1,
      volatility: 'low',
      isMobile: true,
      isDesktop: true,
      isActive: true,
      isPopular: true,
      releaseDate: '2012-12-17',
      launchCount: 18543,
      imageUrl: '/src/assets/starburst.jpg',
      hasBonus: false,
      hasFreeSpins: false,
      isFeatured: true,
      minBet: 0.1,
      maxBet: 100,
      maxWin: 5000,
    },
    {
      id: 8,
      name: 'Texas Hold\'em Poker',
      provider: 'evolution',
      providerName: 'Evolution Gaming',
      category: 'poker',
      categoryName: 'Poker',
      rtp: 99.0,
      volatility: 'high',
      isMobile: true,
      isDesktop: true,
      isActive: false,
      isPopular: false,
      releaseDate: '2019-07-22',
      launchCount: 4521,
      imageUrl: '/src/assets/poker.jpg',
      hasBonus: false,
      hasFreeSpins: false,
      isFeatured: false,
      minBet: 1,
      maxBet: 10000,
      maxWin: 0,
    },
    {
      id: 9,
      name: 'Gonzo\'s Quest',
      provider: 'netent',
      providerName: 'NetEnt',
      category: 'slot',
      categoryName: 'Slot',
      rtp: 95.9,
      volatility: 'medium',
      isMobile: true,
      isDesktop: true,
      isActive: true,
      isPopular: true,
      releaseDate: '2013-05-14',
      launchCount: 12735,
      imageUrl: '/src/assets/gonzos-quest.jpg',
      hasBonus: true,
      hasFreeSpins: true,
      isFeatured: false,
      minBet: 0.2,
      maxBet: 50,
      maxWin: 37500,
    },
    {
      id: 10,
      name: 'Baccarat Squeeze',
      provider: 'evolution',
      providerName: 'Evolution Gaming',
      category: 'live',
      categoryName: 'Live Casino',
      rtp: 98.9,
      volatility: 'low',
      isMobile: true,
      isDesktop: true,
      isActive: true,
      isPopular: false,
      releaseDate: '2017-11-30',
      launchCount: 6842,
      imageUrl: '/src/assets/baccarat.jpg',
      hasBonus: false,
      hasFreeSpins: false,
      isFeatured: false,
      minBet: 5,
      maxBet: 10000,
      maxWin: 0,
    },
    {
      id: 11,
      name: 'Mega Moolah',
      provider: 'microgaming',
      providerName: 'Microgaming',
      category: 'slot',
      categoryName: 'Slot',
      rtp: 94.0,
      volatility: 'high',
      isMobile: true,
      isDesktop: true,
      isActive: true,
      isPopular: true,
      releaseDate: '2008-11-27',
      launchCount: 9876,
      imageUrl: '/src/assets/mega-moolah.jpg',
      hasBonus: true,
      hasFreeSpins: true,
      isFeatured: true,
      minBet: 0.25,
      maxBet: 6.25,
      maxWin: 'Progressive',
    },
    {
      id: 12,
      name: 'Divine Fortune',
      provider: 'netent',
      providerName: 'NetEnt',
      category: 'slot',
      categoryName: 'Slot',
      rtp: 96.6,
      volatility: 'medium',
      isMobile: true,
      isDesktop: true,
      isActive: true,
      isPopular: false,
      releaseDate: '2017-01-24',
      launchCount: 7654,
      imageUrl: '/src/assets/divine-fortune.jpg',
      hasBonus: true,
      hasFreeSpins: true,
      isFeatured: false,
      minBet: 0.2,
      maxBet: 100,
      maxWin: 'Progressive',
    },
  ];

  // Büyük veri kümeleri için optimize edilmiş filtreleme metodu
  const filteredGames = useMemo(() => {
    // İlk filtreleme işlemine başlamadan önce yükleme durumunu başlat
    setIsLoading(true);
    
    // Her filtreleme işlemi için tüm oyunları taramak yerine, kademeli filtreleme kullan
    // Bu, büyük veri kümeleri için CPU kullanımını azaltır
    let result = gamesData;
    
    // Arama filtresi - en sık kullanılan filtre olduğundan ilk önce bunu uygula
    if (searchTerm) {
      const lowerSearchTerm = searchTerm.toLowerCase();
      result = result.filter(game => 
        game.name.toLowerCase().includes(lowerSearchTerm) || 
        game.providerName.toLowerCase().includes(lowerSearchTerm)
      );
    }
    
    // Kategori filtresi
    if (categoryFilter !== 'all') {
      result = result.filter(game => game.category === categoryFilter);
    }
    
    // Sağlayıcı filtresi
    if (providerFilter !== 'all') {
      result = result.filter(game => game.provider === providerFilter);
    }
    
    // Durum filtresi
    if (statusFilter !== 'all') {
      result = result.filter(game => 
        (statusFilter === 'active' && game.isActive) || 
        (statusFilter === 'inactive' && !game.isActive)
      );
    }
    
    // Filtreleme bittiğinde yükleme durumunu kapat
    setIsLoading(false);
    
    return result;
  }, [gamesData, searchTerm, categoryFilter, providerFilter, statusFilter]);
  
  // Sıralama işlemi - useMemo ile optimize edildi
  const sortedGames = useMemo(() => {
    // Şuanki sıralama durumunu önbelleğe alma için
    const currentSortColumn = sortColumn;
    const currentSortDirection = sortDirection;
    
    return [...filteredGames].sort((a, b) => {
      // a ve b'nin kesin tip kontrolüyle ilgili özelliklere erişim
      // @ts-ignore kullanmak yerine güvenli tip dönüşümü
      const valueA = a[currentSortColumn as keyof Game];
      const valueB = b[currentSortColumn as keyof Game];
      
      // Özel tarih sıralaması - daha verimli hale getirildi
      if (currentSortColumn === 'releaseDate') {
        // Tarihleri bir kez dönüştür ve karşılaştır
        const dateA = new Date(valueA as string).getTime();
        const dateB = new Date(valueB as string).getTime();
        return currentSortDirection === 'asc' ? dateA - dateB : dateB - dateA;
      }
      
      // Sayısal değerler için sıralama - maxWin gibi potansiyel string değerleri için kontrol eklendi
      if (typeof valueA === 'number' && typeof valueB === 'number') {
        return currentSortDirection === 'asc' ? valueA - valueB : valueB - valueA;
      }
      
      // String değerler için sıralama
      if (typeof valueA === 'string' && typeof valueB === 'string') {
        // localeCompare kullanarak daha doğru string karşılaştırması
        return currentSortDirection === 'asc' 
          ? valueA.localeCompare(valueB) 
          : valueB.localeCompare(valueA);
      }
      
      // Boolean değerler için sıralama
      if (typeof valueA === 'boolean' && typeof valueB === 'boolean') {
        return currentSortDirection === 'asc'
          ? Number(valueA) - Number(valueB)
          : Number(valueB) - Number(valueA);
      }
      
      // Karşılaştırılamayan değerler için varsayılan davranış
      return 0;
    });
  }, [filteredGames, sortColumn, sortDirection]);
  
  // Dinamik olarak ayarlanabilen sayfa başına öğe sayısı
  const totalPages = useMemo(() => Math.ceil(sortedGames.length / itemsPerPage), [sortedGames.length, itemsPerPage]);
  
  // Sayfalama - büyük veri kümeleri için optimize edildi
  const paginatedGames = useMemo(() => {
    // Sadece görüntülenecek oyunları hesapla (bellek optimizasyonu)
    const startIdx = (currentPage - 1) * itemsPerPage;
    const endIdx = Math.min(startIdx + itemsPerPage, sortedGames.length);
    
    // Hiç oyun yoksa boş dizi döndür
    if (sortedGames.length === 0) return [];
    
    return sortedGames.slice(startIdx, endIdx);
  }, [sortedGames, currentPage, itemsPerPage]);
  
  // Sıralama işlemi - useCallback ile optimize edildi
  const handleSort = useCallback((column: string) => {
    // Performans için önce bir önbellekleme kontrolü yapalım
    if (column === sortColumn) {
      setSortDirection(prevDirection => prevDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(column);
      setSortDirection('asc');
    }
    
    // Sayfalama sıfırlanır (kullanıcı deneyimi iyileştirmesi)
    setCurrentPage(1);
  }, [sortColumn]);

  // Sayfa değiştirme - useCallback ile optimize edildi
  const handlePageChange = useCallback((page: number) => {
    // Sayfa değiştirme performansını artırmak için window kaydırma
    window.scrollTo({ top: 0, behavior: 'smooth' });
    setCurrentPage(page);
  }, []);

  // Oyun seçme - useCallback ile optimize edildi
  const handleSelectRow = useCallback((id: number) => {
    // Fonksiyonel güncelleme yöntemi kullanarak performans iyileştirmesi
    setSelectedRows(prevSelected => {
      if (prevSelected.includes(id)) {
        // Seçimi kaldır
        return prevSelected.filter(rowId => rowId !== id);
      } else {
        // Seçime ekle
        return [...prevSelected, id];
      }
    });
  }, []);

  // Tüm oyunları seçme - useCallback ile optimize edildi
  const handleSelectAll = useCallback(() => {
    // Yüksek veri hacmi için optimize edilmiş toplu seçim
    setSelectedRows(prev => {
      // Mevcut seçim durumunu kontrol et
      const isAllSelected = prev.length === paginatedGames.length && 
        paginatedGames.every(game => prev.includes(game.id));
        
      // Tümü seçiliyse temizle, değilse tümünü seç
      return isAllSelected ? [] : paginatedGames.map(game => game.id);
    });
  }, [paginatedGames]);

  // Silme onayı
  const confirmDelete = () => {
    // Gerçek uygulamada API çağrısı yapılır
    console.log(`Oyun silindi: ${gameToDelete}`);
    setShowDeleteModal(false);
    setGameToDelete(null);
    
    // Başarılı işlem bildirimi
    toast({
      title: "Oyun silindi",
      description: "Oyun başarıyla silindi",
      variant: "success"
    });
  };

  // Oyun istatistikleri - useMemo ile optimize edildi
  const gameStats = useMemo(() => {
    // Tek geçişte tüm istatistikleri hesapla (CPU optimizasyonu için)
    const stats = gamesData.reduce((acc, game) => {
      // Aktif oyun sayısı
      if (game.isActive) acc.activeGames++;
      
      // Popüler oyun sayısı
      if (game.isPopular) acc.popularGames++;
      
      // Kategori bazlı sayılar
      if (game.category === 'slot') acc.slotGames++;
      if (game.category === 'casino' || game.category === 'live') acc.casinoGames++;
      
      // Mobil oyun sayısı
      if (game.isMobile) acc.mobileGames++;
      
      // Toplam başlatma sayısı
      acc.totalLaunches += game.launchCount;
      
      // Sağlayıcı kümesine ekle
      acc.providers.add(game.provider);
      
      return acc;
    }, {
      activeGames: 0,
      popularGames: 0,
      slotGames: 0,
      casinoGames: 0,
      mobileGames: 0,
      totalLaunches: 0,
      providers: new Set<string>()
    });
    
    return {
      totalGames: gamesData.length,
      activeGames: stats.activeGames,
      popularGames: stats.popularGames,
      slotGames: stats.slotGames,
      casinoGames: stats.casinoGames,
      mobileGames: stats.mobileGames,
      providersCount: stats.providers.size,
      totalLaunches: stats.totalLaunches,
    };
  }, [gamesData]);
  
  // Gelişmiş oyun yönetimi fonksiyonları
  // Satırları seçme işlemi - useCallback ile optimize edildi
  const handleSelectRow = useCallback((id: number) => {
    setSelectedRows(prev => 
      prev.includes(id) 
        ? prev.filter(rowId => rowId !== id) 
        : [...prev, id]
    );
  }, []);
  
  // Oyun detayları görüntüleme - useCallback ile optimize edildi
  const handleViewDetails = useCallback((game: Game) => {
    setSelectedGame(game);
    setShowDetailsModal(true);
  }, []);
  
  // Oyun silme - useCallback ile optimize edildi
  const handleDeleteClick = useCallback((id: number) => {
    setGameToDelete(id);
    setShowDeleteModal(true);
  }, []);
  
  // Tüm oyunları seçme - useCallback ile optimize edildi
  const handleSelectAll = useCallback(() => {
    setSelectedRows(prev => 
      prev.length === paginatedGames.length
        ? []
        : paginatedGames.map(game => game.id)
    );
  }, [paginatedGames]);
  
  // Filtreleri sıfırlama - useCallback ile optimize edildi
  const resetFilters = useCallback(() => {
    setSearchTerm('');
    setCategoryFilter('all');
    setProviderFilter('all');
    setStatusFilter('all');
    setCurrentPage(1);
  }, []);
  
  // Toplu İşlemler için optimizasyon
  const bulkActions = useMemo(() => {
    const selectedCount = selectedRows.length;
    
    return {
      anySelected: selectedCount > 0,
      selectedCount,
      allSelected: selectedCount === paginatedGames.length && selectedCount > 0,
      canDelete: selectedCount > 0,
      canActivate: selectedCount > 0,
      canDeactivate: selectedCount > 0
    };
  }, [selectedRows.length, paginatedGames.length]);

  return (
    <AdminLayout title={t('admin.games') || 'Oyunlar'}>
      {/* İstatistik Kartları - optimize edilmiş bileşenler */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <StatCard 
          title={t('admin.total_games') || 'Toplam Oyun'}
          value={gameStats.totalGames}
          icon={Gamepad2}
          secondaryText={t('admin.active') || 'Aktif'}
          secondaryValue={gameStats.activeGames}
        />

        <StatCard 
          title={t('admin.popular_games') || 'Popüler Oyunlar'}
          value={gameStats.popularGames}
          icon={Star}
          secondaryText={t('admin.percentage') || 'Oran'}
          secondaryValue={`${Math.round((gameStats.popularGames / gameStats.totalGames) * 100)}%`}
          isPercentage={true}
        />

        <StatCard 
          title={t('admin.total_launches') || 'Toplam Başlatma'}
          value={gameStats.totalLaunches}
          icon={BarChart2}
          secondaryText={t('admin.avg_per_game') || 'Oyun Başına'}
          secondaryValue={Math.round(gameStats.totalLaunches / gameStats.totalGames).toLocaleString()}
        />

        <StatCard 
          title={t('admin.categories') || 'Kategoriler'}
          value={`${gameStats.slotGames} / ${gameStats.casinoGames}`}
          icon={LayoutGrid}
          secondaryText={t('admin.slot_casino_ratio') || 'Slot/Casino Oranı'} 
          secondaryValue=""
        />
              <div className="flex items-center mt-2">
                <Shuffle className="h-4 w-4 text-purple-500 mr-1" />
                <span className="text-sm text-purple-400 font-medium">
                  {t('admin.slot_casino_ratio') || 'Slot/Casino Oranı'}
                </span>
              </div>
            </div>
            <div className="p-3 bg-gray-900/80 border border-yellow-500/30 rounded-lg shadow-md">
              <LayoutGrid className="h-8 w-8 text-yellow-500" />
            </div>
          </div>
        </div>
      </div>

      {/* Filtreler ve Arama */}
      <div className="bg-gray-800/80 rounded-xl shadow-lg p-6 border border-yellow-500/20 backdrop-blur-sm hover:border-yellow-500/30 transition-all duration-300 mb-6">
        <div className="flex flex-col md:flex-row md:items-end md:justify-between gap-4">
          <div className="space-y-4 md:space-y-0 md:flex md:gap-4 flex-wrap">
            {/* Arama */}
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
              <input
                type="text"
                placeholder={t('admin.search_games') || 'Oyun Ara...'}
                className="pl-10 pr-4 py-2 bg-gray-700 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500 w-full md:w-64"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Kategori Filtresi */}
            <div className="relative">
              <div className="flex items-center bg-gray-700 border border-gray-600 rounded-md overflow-hidden">
                <select
                  className="bg-gray-700 text-white px-4 py-2 appearance-none focus:outline-none focus:ring-2 focus:ring-yellow-500 w-full"
                  value={categoryFilter}
                  onChange={(e) => setCategoryFilter(e.target.value)}
                >
                  <option value="all">{t('admin.all_categories') || 'Tüm Kategoriler'}</option>
                  {gameCategories.map((category) => (
                    <option key={category.id} value={category.id}>
                      {category.name}
                    </option>
                  ))}
                </select>
                <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                  <Filter className="h-4 w-4" />
                </div>
              </div>
            </div>

            {/* Sağlayıcı Filtresi */}
            <div className="relative">
              <div className="flex items-center bg-gray-700 border border-gray-600 rounded-md overflow-hidden">
                <select
                  className="bg-gray-700 text-white px-4 py-2 appearance-none focus:outline-none focus:ring-2 focus:ring-yellow-500 w-full"
                  value={providerFilter}
                  onChange={(e) => setProviderFilter(e.target.value)}
                >
                  <option value="all">{t('admin.all_providers') || 'Tüm Sağlayıcılar'}</option>
                  {gameProviders.map((provider) => (
                    <option key={provider.id} value={provider.id}>
                      {provider.name}
                    </option>
                  ))}
                </select>
                <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                  <Filter className="h-4 w-4" />
                </div>
              </div>
            </div>

            {/* Durum Filtresi */}
            <div className="relative">
              <div className="flex items-center bg-gray-700 border border-gray-600 rounded-md overflow-hidden">
                <select
                  className="bg-gray-700 text-white px-4 py-2 appearance-none focus:outline-none focus:ring-2 focus:ring-yellow-500 w-full"
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                >
                  <option value="all">{t('admin.all_status') || 'Tüm Durumlar'}</option>
                  <option value="active">{t('admin.active') || 'Aktif'}</option>
                  <option value="inactive">{t('admin.inactive') || 'Pasif'}</option>
                </select>
                <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                  <Filter className="h-4 w-4" />
                </div>
              </div>
            </div>
          </div>

          <div className="flex gap-3">
            <button
              onClick={() => {
                setSearchTerm('');
                setCategoryFilter('all');
                setProviderFilter('all');
                setStatusFilter('all');
              }}
              className="px-4 py-2 bg-gray-700 text-white rounded-md hover:bg-gray-600 transition-colors"
            >
              {t('admin.reset_filters') || 'Filtreleri Sıfırla'}
            </button>
            <button className="flex items-center bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded-md transition-colors">
              <Download className="h-5 w-5 mr-2" />
              {t('admin.export') || 'Dışa Aktar'}
            </button>
            <button
              onClick={() => setShowGameModal(true)}
              className="flex items-center bg-yellow-500 hover:bg-yellow-600 text-black px-4 py-2 rounded-md transition-colors"
            >
              <PlusCircle className="h-5 w-5 mr-2" />
              {t('admin.add_game') || 'Oyun Ekle'}
            </button>
          </div>
        </div>
      </div>

      {/* Oyun Tablosu */}
      <div className="bg-gray-800/80 rounded-xl shadow-lg border border-yellow-500/20 backdrop-blur-sm hover:border-yellow-500/30 transition-all duration-300 overflow-hidden mb-6">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-700">
            <thead className="bg-gray-900/80 border-b border-yellow-500/20">
              <tr>
                <th className="px-4 py-3 text-left">
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      checked={
                        paginatedGames.length > 0 &&
                        selectedRows.length === paginatedGames.length
                      }
                      onChange={handleSelectAll}
                      className="rounded border-gray-400 text-yellow-500 focus:ring-yellow-500"
                    />
                  </div>
                </th>
                <th
                  className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer"
                  onClick={() => handleSort('id')}
                >
                  <div className="flex items-center">
                    <span>ID</span>
                    {sortColumn === 'id' && (
                      <ChevronDown
                        className={`ml-1 h-4 w-4 ${
                          sortDirection === 'desc' ? 'transform rotate-180' : ''
                        }`}
                      />
                    )}
                  </div>
                </th>
                <th
                  className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer"
                  onClick={() => handleSort('name')}
                >
                  <div className="flex items-center">
                    <span>{t('admin.game_name') || 'Oyun Adı'}</span>
                    {sortColumn === 'name' && (
                      <ChevronDown
                        className={`ml-1 h-4 w-4 ${
                          sortDirection === 'desc' ? 'transform rotate-180' : ''
                        }`}
                      />
                    )}
                  </div>
                </th>
                <th
                  className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer"
                  onClick={() => handleSort('providerName')}
                >
                  <div className="flex items-center">
                    <span>{t('admin.provider') || 'Sağlayıcı'}</span>
                    {sortColumn === 'providerName' && (
                      <ChevronDown
                        className={`ml-1 h-4 w-4 ${
                          sortDirection === 'desc' ? 'transform rotate-180' : ''
                        }`}
                      />
                    )}
                  </div>
                </th>
                <th
                  className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hidden md:table-cell"
                  onClick={() => handleSort('categoryName')}
                >
                  <div className="flex items-center">
                    <span>{t('admin.category') || 'Kategori'}</span>
                    {sortColumn === 'categoryName' && (
                      <ChevronDown
                        className={`ml-1 h-4 w-4 ${
                          sortDirection === 'desc' ? 'transform rotate-180' : ''
                        }`}
                      />
                    )}
                  </div>
                </th>
                <th
                  className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hidden md:table-cell"
                  onClick={() => handleSort('rtp')}
                >
                  <div className="flex items-center">
                    <span>RTP %</span>
                    {sortColumn === 'rtp' && (
                      <ChevronDown
                        className={`ml-1 h-4 w-4 ${
                          sortDirection === 'desc' ? 'transform rotate-180' : ''
                        }`}
                      />
                    )}
                  </div>
                </th>
                <th
                  className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hidden md:table-cell"
                  onClick={() => handleSort('launchCount')}
                >
                  <div className="flex items-center">
                    <span>{t('admin.launches') || 'Başlatma'}</span>
                    {sortColumn === 'launchCount' && (
                      <ChevronDown
                        className={`ml-1 h-4 w-4 ${
                          sortDirection === 'desc' ? 'transform rotate-180' : ''
                        }`}
                      />
                    )}
                  </div>
                </th>
                <th
                  className="px-4 py-3 text-center text-xs font-medium text-gray-400 uppercase tracking-wider"
                >
                  {t('admin.status') || 'Durum'}
                </th>
                <th className="px-4 py-3 text-right text-xs font-medium text-gray-400 uppercase tracking-wider">
                  {t('admin.actions') || 'İşlemler'}
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-700">
              {paginatedGames.map((game) => (
                <tr
                  key={game.id}
                  className={`${
                    selectedRows.includes(game.id) ? 'bg-gray-700' : 'hover:bg-gray-700'
                  }`}
                >
                  <td className="px-4 py-4">
                    <input
                      type="checkbox"
                      checked={selectedRows.includes(game.id)}
                      onChange={() => handleSelectRow(game.id)}
                      className="rounded border-gray-400 text-yellow-500 focus:ring-yellow-500"
                    />
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-300">
                    #{game.id}
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="flex-shrink-0 h-10 w-10 rounded-md overflow-hidden bg-gray-600">
                        {game.imageUrl ? (
                          <img
                            src={game.imageUrl}
                            alt={game.name}
                            className="h-10 w-10 object-cover"
                            onError={(e) => {
                              (e.target as HTMLImageElement).src = 'https://via.placeholder.com/40x40?text=Game';
                            }}
                          />
                        ) : (
                          <div className="h-10 w-10 flex items-center justify-center bg-gray-700 text-gray-400">
                            <Gamepad2 size={20} />
                          </div>
                        )}
                      </div>
                      <div className="ml-4">
                        <div className="text-sm font-medium text-white">{game.name}</div>
                        <div className="text-xs text-gray-400 flex items-center">
                          {game.isPopular && (
                            <Star className="h-3 w-3 text-yellow-500 mr-1" />
                          )}
                          {game.isFeatured && (
                            <span className="text-yellow-500 text-xs ml-1">
                              {t('admin.featured') || 'Öne Çıkan'}
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-300">
                    {game.providerName}
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-300 hidden md:table-cell">
                    {game.categoryName}
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-300 hidden md:table-cell">
                    {game.rtp}%
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-300 hidden md:table-cell">
                    {game.launchCount.toLocaleString()}
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-center">
                    <span
                      className={`px-2 py-1 text-xs rounded-full ${
                        game.isActive
                          ? 'bg-green-900 text-green-300'
                          : 'bg-gray-600 text-gray-300'
                      }`}
                    >
                      {game.isActive
                        ? t('admin.active') || 'Aktif'
                        : t('admin.inactive') || 'Pasif'}
                    </span>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex justify-end space-x-2">
                      <button
                        onClick={() => handleViewDetails(game)}
                        className="text-blue-400 hover:text-blue-300"
                        title={t('admin.view') || 'Görüntüle'}
                      >
                        <Eye className="h-5 w-5" />
                      </button>
                      <button
                        className="text-yellow-400 hover:text-yellow-300"
                        title={t('admin.edit') || 'Düzenle'}
                      >
                        <Edit className="h-5 w-5" />
                      </button>
                      <button
                        onClick={() => handleDeleteClick(game.id)}
                        className="text-red-400 hover:text-red-300"
                        title={t('admin.delete') || 'Sil'}
                      >
                        <Trash className="h-5 w-5" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Sayfalama */}
        <div className="bg-gray-900/80 px-4 py-3 flex items-center justify-between border-t border-yellow-500/20">
          <div className="flex-1 flex justify-between sm:hidden">
            <button
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
              className={`relative inline-flex items-center px-4 py-2 border border-gray-600 text-sm font-medium rounded-md ${
                currentPage === 1
                  ? 'bg-gray-700 text-gray-400 cursor-not-allowed'
                  : 'bg-gray-700 text-white hover:bg-gray-600'
              }`}
            >
              {t('admin.previous') || 'Önceki'}
            </button>
            <button
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              className={`ml-3 relative inline-flex items-center px-4 py-2 border border-gray-600 text-sm font-medium rounded-md ${
                currentPage === totalPages
                  ? 'bg-gray-700 text-gray-400 cursor-not-allowed'
                  : 'bg-gray-700 text-white hover:bg-gray-600'
              }`}
            >
              {t('admin.next') || 'Sonraki'}
            </button>
          </div>
          <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
              <p className="text-sm text-gray-400">
                {t('admin.showing') || 'Gösteriliyor'}{' '}
                <span className="font-medium text-white">
                  {(currentPage - 1) * itemsPerPage + 1}
                </span>{' '}
                {t('admin.to') || 'ile'}{' '}
                <span className="font-medium text-white">
                  {Math.min(currentPage * itemsPerPage, sortedGames.length)}
                </span>{' '}
                {t('admin.of') || '/'}
                <span className="font-medium text-white"> {sortedGames.length} </span>
                {t('admin.results') || 'sonuç'}
              </p>
            </div>
            <div>
              <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                <button
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                  className={`relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-600 bg-gray-700 text-sm font-medium ${
                    currentPage === 1
                      ? 'text-gray-400 cursor-not-allowed'
                      : 'text-white hover:bg-gray-600'
                  }`}
                >
                  <span className="sr-only">{t('admin.previous') || 'Önceki'}</span>
                  <ChevronDown className="h-5 w-5 transform rotate-90" />
                </button>
                {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
                  <button
                    key={page}
                    onClick={() => handlePageChange(page)}
                    className={`relative inline-flex items-center px-4 py-2 border border-gray-600 text-sm font-medium ${
                      page === currentPage
                        ? 'bg-yellow-500 text-black'
                        : 'bg-gray-700 text-white hover:bg-gray-600'
                    }`}
                  >
                    {page}
                  </button>
                ))}
                <button
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className={`relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-600 bg-gray-700 text-sm font-medium ${
                    currentPage === totalPages
                      ? 'text-gray-400 cursor-not-allowed'
                      : 'text-white hover:bg-gray-600'
                  }`}
                >
                  <span className="sr-only">{t('admin.next') || 'Sonraki'}</span>
                  <ChevronDown className="h-5 w-5 transform -rotate-90" />
                </button>
              </nav>
            </div>
          </div>
        </div>
      </div>

      {/* Silme Modal */}
      {showDeleteModal && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity" aria-hidden="true">
              <div className="absolute inset-0 bg-gray-900 opacity-75"></div>
            </div>
            <span
              className="hidden sm:inline-block sm:align-middle sm:h-screen"
              aria-hidden="true"
            >
              &#8203;
            </span>
            <div className="inline-block align-bottom bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
              <div className="bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="sm:flex sm:items-start">
                  <div className="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-900 sm:mx-0 sm:h-10 sm:w-10">
                    <Trash className="h-6 w-6 text-red-300" />
                  </div>
                  <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                    <h3 className="text-lg leading-6 font-medium text-white">
                      {t('admin.delete_game') || 'Oyunu Sil'}
                    </h3>
                    <div className="mt-2">
                      <p className="text-sm text-gray-300">
                        {t('admin.delete_game_confirmation') ||
                          'Bu oyunu silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.'}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-800 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={confirmDelete}
                >
                  {t('admin.delete') || 'Sil'}
                </button>
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-600 shadow-sm px-4 py-2 bg-gray-700 text-base font-medium text-white hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={() => setShowDeleteModal(false)}
                >
                  {t('admin.cancel') || 'İptal'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Oyun Detayları Modal */}
      {showDetailsModal && selectedGame && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity" aria-hidden="true">
              <div className="absolute inset-0 bg-gray-900 opacity-75"></div>
            </div>
            <span
              className="hidden sm:inline-block sm:align-middle sm:h-screen"
              aria-hidden="true"
            >
              &#8203;
            </span>
            <div className="inline-block align-bottom bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full">
              <div className="bg-gray-800 px-4 pt-5 pb-4 sm:p-6">
                <div className="flex justify-between items-start mb-4">
                  <div className="flex items-center">
                    <div className="flex-shrink-0 h-12 w-12 rounded-md overflow-hidden bg-gray-700">
                      {selectedGame.imageUrl ? (
                        <img
                          src={selectedGame.imageUrl}
                          alt={selectedGame.name}
                          className="h-12 w-12 object-cover"
                          onError={(e) => {
                            (e.target as HTMLImageElement).src = 'https://via.placeholder.com/48x48?text=Game';
                          }}
                        />
                      ) : (
                        <div className="h-12 w-12 flex items-center justify-center bg-gray-700 text-gray-400">
                          <Gamepad2 size={24} />
                        </div>
                      )}
                    </div>
                    <div className="ml-4">
                      <h3 className="text-lg leading-6 font-medium text-white">
                        {selectedGame.name}
                      </h3>
                      <p className="text-sm text-gray-400">
                        {selectedGame.providerName} • {selectedGame.categoryName}
                      </p>
                    </div>
                  </div>
                  <button
                    onClick={() => setShowDetailsModal(false)}
                    className="text-gray-400 hover:text-gray-300"
                  >
                    <X className="h-6 w-6" />
                  </button>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                  {/* Temel Bilgiler */}
                  <div className="bg-gray-700 p-4 rounded-lg">
                    <h4 className="text-yellow-500 text-sm font-medium mb-3">
                      {t('admin.basic_info') || 'Temel Bilgiler'}
                    </h4>
                    <div className="grid grid-cols-2 gap-3">
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.game_id') || 'Oyun ID'}
                        </p>
                        <p className="text-sm text-white">#{selectedGame.id}</p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.category') || 'Kategori'}
                        </p>
                        <p className="text-sm text-white">{selectedGame.categoryName}</p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.provider') || 'Sağlayıcı'}
                        </p>
                        <p className="text-sm text-white">{selectedGame.providerName}</p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.release_date') || 'Yayın Tarihi'}
                        </p>
                        <p className="text-sm text-white">{selectedGame.releaseDate}</p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.status') || 'Durum'}
                        </p>
                        <div className="flex items-center">
                          {selectedGame.isActive ? (
                            <span className="text-green-500 flex items-center">
                              <Check className="h-4 w-4 mr-1" />
                              {t('admin.active') || 'Aktif'}
                            </span>
                          ) : (
                            <span className="text-gray-400 flex items-center">
                              <X className="h-4 w-4 mr-1" />
                              {t('admin.inactive') || 'Pasif'}
                            </span>
                          )}
                        </div>
                      </div>
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.total_launches') || 'Toplam Başlatma'}
                        </p>
                        <p className="text-sm text-white">{selectedGame.launchCount.toLocaleString()}</p>
                      </div>
                    </div>
                  </div>

                  {/* Oynanış Bilgileri */}
                  <div className="bg-gray-700 p-4 rounded-lg">
                    <h4 className="text-yellow-500 text-sm font-medium mb-3">
                      {t('admin.gameplay_info') || 'Oynanış Bilgileri'}
                    </h4>
                    <div className="grid grid-cols-2 gap-3">
                      <div>
                        <p className="text-xs text-gray-400">RTP</p>
                        <p className="text-sm text-white">{selectedGame.rtp}%</p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.volatility') || 'Volatilite'}
                        </p>
                        <p className="text-sm text-white capitalize">
                          {selectedGame.volatility === 'high'
                            ? t('admin.high') || 'Yüksek'
                            : selectedGame.volatility === 'medium'
                            ? t('admin.medium') || 'Orta'
                            : t('admin.low') || 'Düşük'}
                        </p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.min_bet') || 'Min. Bahis'}
                        </p>
                        <p className="text-sm text-white">₺{selectedGame.minBet}</p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.max_bet') || 'Max. Bahis'}
                        </p>
                        <p className="text-sm text-white">₺{selectedGame.maxBet}</p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.max_win') || 'Max. Kazanç'}
                        </p>
                        <p className="text-sm text-white">
                          {typeof selectedGame.maxWin === 'number'
                            ? `${selectedGame.maxWin}x`
                            : selectedGame.maxWin}
                        </p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.popular') || 'Popüler'}
                        </p>
                        <div className="flex items-center">
                          {selectedGame.isPopular ? (
                            <span className="text-yellow-500 flex items-center">
                              <Star className="h-4 w-4 mr-1" />
                              {t('admin.yes') || 'Evet'}
                            </span>
                          ) : (
                            <span className="text-gray-400 flex items-center">
                              <X className="h-4 w-4 mr-1" />
                              {t('admin.no') || 'Hayır'}
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Cihaz ve Bonus Bilgileri */}
                  <div className="bg-gray-700 p-4 rounded-lg">
                    <h4 className="text-yellow-500 text-sm font-medium mb-3">
                      {t('admin.device_bonus_info') || 'Cihaz ve Bonus Bilgileri'}
                    </h4>
                    <div className="grid grid-cols-2 gap-3">
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.desktop_support') || 'Masaüstü Desteği'}
                        </p>
                        <div className="flex items-center">
                          {selectedGame.isDesktop ? (
                            <span className="text-green-500 flex items-center">
                              <Check className="h-4 w-4 mr-1" />
                              {t('admin.yes') || 'Evet'}
                            </span>
                          ) : (
                            <span className="text-gray-400 flex items-center">
                              <X className="h-4 w-4 mr-1" />
                              {t('admin.no') || 'Hayır'}
                            </span>
                          )}
                        </div>
                      </div>
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.mobile_support') || 'Mobil Desteği'}
                        </p>
                        <div className="flex items-center">
                          {selectedGame.isMobile ? (
                            <span className="text-green-500 flex items-center">
                              <Check className="h-4 w-4 mr-1" />
                              {t('admin.yes') || 'Evet'}
                            </span>
                          ) : (
                            <span className="text-gray-400 flex items-center">
                              <X className="h-4 w-4 mr-1" />
                              {t('admin.no') || 'Hayır'}
                            </span>
                          )}
                        </div>
                      </div>
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.bonus_feature') || 'Bonus Özelliği'}
                        </p>
                        <div className="flex items-center">
                          {selectedGame.hasBonus ? (
                            <span className="text-green-500 flex items-center">
                              <Check className="h-4 w-4 mr-1" />
                              {t('admin.yes') || 'Evet'}
                            </span>
                          ) : (
                            <span className="text-gray-400 flex items-center">
                              <X className="h-4 w-4 mr-1" />
                              {t('admin.no') || 'Hayır'}
                            </span>
                          )}
                        </div>
                      </div>
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.free_spins') || 'Bedava Dönüş'}
                        </p>
                        <div className="flex items-center">
                          {selectedGame.hasFreeSpins ? (
                            <span className="text-green-500 flex items-center">
                              <Check className="h-4 w-4 mr-1" />
                              {t('admin.yes') || 'Evet'}
                            </span>
                          ) : (
                            <span className="text-gray-400 flex items-center">
                              <X className="h-4 w-4 mr-1" />
                              {t('admin.no') || 'Hayır'}
                            </span>
                          )}
                        </div>
                      </div>
                      <div>
                        <p className="text-xs text-gray-400">
                          {t('admin.featured') || 'Öne Çıkan'}
                        </p>
                        <div className="flex items-center">
                          {selectedGame.isFeatured ? (
                            <span className="text-yellow-500 flex items-center">
                              <Star className="h-4 w-4 mr-1" />
                              {t('admin.yes') || 'Evet'}
                            </span>
                          ) : (
                            <span className="text-gray-400 flex items-center">
                              <X className="h-4 w-4 mr-1" />
                              {t('admin.no') || 'Hayır'}
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="mt-6 flex justify-end space-x-3">
                  <button className="inline-flex justify-center px-4 py-2 text-sm font-medium text-white bg-yellow-500 hover:bg-yellow-600 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500">
                    {t('admin.edit_game') || 'Oyunu Düzenle'}
                  </button>
                  <button
                    onClick={() => setShowDetailsModal(false)}
                    className="inline-flex justify-center px-4 py-2 text-sm font-medium text-white bg-gray-700 hover:bg-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500"
                  >
                    {t('admin.close') || 'Kapat'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </AdminLayout>
  );
};

export default Games;